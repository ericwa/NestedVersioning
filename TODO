TODO
====

General
-------
- Change all uses of NSSet that don't NEED to be NSSet to NSArray for performance

Store
-----

- GC unreachable revisions (aka history compacting)including unreachable non-gc-root persistent "roots"
- Merge all gc code into a single GC pass.
x Write binary serialization format
- Write COItem import/export using binary parser.
  \Per-item code must be pure C.
- Never store UUIDs explictly but use a int <-> UUID table (in every database.)
  since they tend to be reused a lot.
- Same with property names
- Even the proot metadata is slow to write to json and back. Store it directly in tables.

X Full-text search
- Other search
- Cache references

Performance problems:
- why does increasing the delta run length make performance worse?
x why does performance get linearly worse with more items even if we only modify one?
  - The test reads back all items from each commit, even when only one is modified.
    So

COItem
------

- Lazy deserialization. Upon creation from store, ivar is a NSData with the binary serialized form.
X Fix validation perf. (removed validation)
X COItemTree: fix performance problems (removed validation)

Types
-----

x remove bag / unique array types
- figure out where to put type names for primitives (<NSData> is org.etoile.bezier-path)
- Get rid of COType and use an int:

kCOStringType 1
kCOIntType 2
...

kCOSetType 1024
kCOArrayType 2048

(kCOSetType | kCOIntType)

Schema
------

- 


COObject / COEditingContext
---------------------------

- Fix bugs and complete.

Undo/redo
---------
- Don't put in CO core.
- Write a undo manager that has 4 stacks per persistent root:
 - metadata undo, metadata redo, state undo (current branch, current commit), state redo 


Tests
-----

- port all...