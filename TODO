TODO
====

May 2013
--------

- COEditingContext implements COItemGraph. If anyone wants to modify those items
  returned by -itemForUUID:, then items need to tell the context when they're modified

Apr 2013
--------





General
-------
- Change all uses of NSSet that don't NEED to be NSSet to NSArray for performance

Store
-----

- FInish docs
x FInish rewrite of attachment GC with no full-store scan.


- Basically there are 3 designs we could do:
    1. simple 1 row per commit design. The row has a BLOB containing a binary-encoded
       [ uuid-number | item-data | uuid-number | item-data ... ] list.
    2. 1-row per item changed per commit. OPtionally keep the delta base and the rev parent
       in another table, and join them
    3. 1 row per property changed per item changed per commit. OPtionally keep the delta base and the rev parent
       in another table, and join them.
       Will work well if we only typically change one or two properties per commit.
       
    4. We could have a hybrid system of a "full-saves" table and a "delta-saves" table.

x GC unreachable revisions (aka history compacting)including unreachable non-gc-root persistent "roots"
x Merge all gc code into a single GC pass.
x Write binary serialization format
x Write COItem import/export using binary parser.
  more or less done: Per-item code must be pure C.
- Never store UUIDs explictly but use a int <-> UUID table (in every database.)
  since they tend to be reused a lot.
- Same with property names
x Even the proot metadata is slow to write to json and back. Store it directly in tables.

X Full-text search
- Other search
x Cache references

Performance problems:
- why does increasing the delta run length make performance worse?
x why does performance get linearly worse with more items even if we only modify one?
  - The test reads back all items from each commit, even when only one is modified.
    So

COItem
------

- Lazy deserialization. Upon creation from store, ivar is a NSData with the binary serialized form.
X Fix validation perf. (removed validation)
X COItemTree: fix performance problems (removed validation)

Types
-----

x remove bag / unique array types
- figure out where to put type names for primitives (<NSData> is org.etoile.bezier-path)
x Get rid of COType and use an int:

kCOStringType 1
kCOIntType 2
...

kCOSetType 1024
kCOArrayType 2048

(kCOSetType | kCOIntType)

Schema
------

- 


COObject / COEditingContext
---------------------------

- Fix bugs and complete.

Undo/redo
---------
- Don't put in CO core.
- Write a undo manager that has 4 stacks per persistent root:
 - metadata undo, metadata redo, state undo (current branch, current commit), state redo 


Tests
-----

- port all...
- test branch creation, switching
- test committing with "update head" off/on.
- test undo/redo
